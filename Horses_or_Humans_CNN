import tensorflow as tf
import tensorflow_datasets as tfds 
from tensorflow.keras.layers.experimental import preprocessing


#Import and prepare test/training data
(test , train), info = tfds.load(name="horses_or_humans",split=["test","train"],as_supervised=True, with_info=True)

#batch and prefetch training/test data
test_data = test.batch(32).prefetch(tf.data.AUTOTUNE)
train_data = train.batch(32).prefetch(tf.data.AUTOTUNE)

#Creating an EarlyStop Callback
early_stop = tf.keras.callbacks.EarlyStopping(monitor = "val_loss")

#Create a baseline CNN model
inputs = tf.keras.Input(shape = (300,300,3),name="input_type")
x = tf.keras.layers.experimental.preprocessing.Rescaling(scale=1./255)(inputs)
x = tf.keras.layers.Conv2D(32,3,1,activation="relu")(x)
x = tf.keras.layers.MaxPool2D()(x)
x = tf.keras.layers.Flatten()(x)
outputs = tf.keras.layers.Dense(1,activation = "sigmoid",name="output_layer")(x)
baseline_model = tf.keras.Model(inputs,outputs)

#Compile baseline model 
baseline_model.compile(
    optimizer = tf.keras.optimizers.Adam(),
    loss = tf.keras.losses.BinaryCrossentropy(),
    metrics = ["accuracy"]
)

#Fit baseline model
base_line_attempt = baseline_model.fit(
    train_data,
    epochs = 5,
    steps_per_epoch = len(train_data),
    validation_data = test_data,
    validation_steps = len(test_data),
    callbacks=[early_stop]
)

#Evaluate model
baseline_model.evaluate(test_data) #loss: 1.4353 - accuracy: 0.6641


######################################################################
#Attempt 2: Adding another dense layers
######################################################################

inputs = tf.keras.Input(shape = (300,300,3),name="input_type")
x = tf.keras.layers.experimental.preprocessing.Rescaling(scale=1./255)(inputs)
x = tf.keras.layers.Conv2D(32,3,1,activation="relu")(x)
x = tf.keras.layers.MaxPool2D()(x)
x = tf.keras.layers.Flatten()(x)
x = tf.keras.layers.Dense(10,activation="relu")(x)
outputs = tf.keras.layers.Dense(1,activation = "sigmoid",name="output_layer")(x)
model_2 = tf.keras.Model(inputs,outputs)
model_2.compile(
    optimizer = tf.keras.optimizers.Adam(),
    loss = tf.keras.losses.BinaryCrossentropy(),
    metrics = ["accuracy"]
)

attempt_2 = model_2.fit(
    train_data,
    epochs = 5,
    steps_per_epoch=len(train_data),
    validation_data = test_data,
    validation_steps = len(test_data),
    callbacks = [early_stop]
)

model_2.evaluate(train_data) #loss: 0.0909 - accuracy: 0.9718
